// Code generated by MockGen. DO NOT EDIT.
// Source: ./k8s/k8s.go

// Package mock_k8s is a generated GoMock package.
package mock_k8s

import (
	gomock "github.com/golang/mock/gomock"
	k8s "github.com/jet/kube-webhook-certgen/k8s"
	reflect "reflect"
)

// MockK8s is a mock of K8s interface
type MockK8s struct {
	ctrl     *gomock.Controller
	recorder *MockK8sMockRecorder
}

// MockK8sMockRecorder is the mock recorder for MockK8s
type MockK8sMockRecorder struct {
	mock *MockK8s
}

// NewMockK8s creates a new mock instance
func NewMockK8s(ctrl *gomock.Controller) *MockK8s {
	mock := &MockK8s{ctrl: ctrl}
	mock.recorder = &MockK8sMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockK8s) EXPECT() *MockK8sMockRecorder {
	return m.recorder
}

// UpdateWebhook mocks base method
func (m *MockK8s) UpdateWebhook(name string, ca []byte, policyType string, hookType k8s.WebhookType) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebhook", name, ca, policyType, hookType)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdateWebhook indicates an expected call of UpdateWebhook
func (mr *MockK8sMockRecorder) UpdateWebhook(name, ca, policyType, hookType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebhook", reflect.TypeOf((*MockK8s)(nil).UpdateWebhook), name, ca, policyType, hookType)
}

// GetCaFromSecret mocks base method
func (m *MockK8s) GetCaFromSecret(secretName, namespace, key string) ([]byte, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCaFromSecret", secretName, namespace, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCaFromSecret indicates an expected call of GetCaFromSecret
func (mr *MockK8sMockRecorder) GetCaFromSecret(secretName, namespace, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCaFromSecret", reflect.TypeOf((*MockK8s)(nil).GetCaFromSecret), secretName, namespace, key)
}

// SaveCertsToSecret mocks base method
func (m *MockK8s) SaveCertsToSecret(secretName, namespace, certName, keyName, caName string, ca, cert, key []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCertsToSecret", secretName, namespace, certName, keyName, caName, ca, cert, key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SaveCertsToSecret indicates an expected call of SaveCertsToSecret
func (mr *MockK8sMockRecorder) SaveCertsToSecret(secretName, namespace, certName, keyName, caName, ca, cert, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCertsToSecret", reflect.TypeOf((*MockK8s)(nil).SaveCertsToSecret), secretName, namespace, certName, keyName, caName, ca, cert, key)
}
